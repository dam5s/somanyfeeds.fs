<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title><![CDATA[Stories by Damien Le Berrigaud on Medium]]></title>
        <description><![CDATA[Stories by Damien Le Berrigaud on Medium]]></description>
        <link>https://medium.com/@its_damo?source=rss-cc848065c96b------2</link>
        <image>
            <url>https://cdn-images-1.medium.com/fit/c/150/150/0*rsrV9zxUYaMoNWMP.</url>
            <title>Stories by Damien Le Berrigaud on Medium</title>
            <link>https://medium.com/@its_damo?source=rss-cc848065c96b------2</link>
        </image>
        <generator>Medium</generator>
        <lastBuildDate>Fri, 13 Apr 2018 19:16:09 GMT</lastBuildDate>
        <atom:link href="https://medium.com/feed/@its_damo" rel="self" type="application/rss+xml"/>
        <webMaster><![CDATA[yourfriends@medium.com]]></webMaster>
        <atom:link href="http://medium.superfeedr.com" rel="hub"/>
        <item>
            <title><![CDATA[First title!]]></title>
            <link>https://medium.com/@its_damo/first</link>
            <guid isPermaLink="false">https://medium.com/p/first</guid>
            <dc:creator><![CDATA[Damien Le Berrigaud]]></dc:creator>
            <pubDate>Tue, 20 Sep 2016 12:54:44 GMT</pubDate>
            <atom:updated>2016-09-20T12:54:44.561Z</atom:updated>
            <content:encoded><![CDATA[<p>This is the content in encoded tag</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Second title!]]></title>
            <link>https://medium.com/@its_damo/second</link>
            <guid isPermaLink="false">https://medium.com/p/second</guid>
            <dc:creator><![CDATA[Damien Le Berrigaud]]></dc:creator>
            <pubDate>Tue, 20 Sep 2016 12:54:44 GMT</pubDate>
            <atom:updated>2016-09-20T12:54:44.561Z</atom:updated>
            <description><![CDATA[<p>This is the content in description tag</p>]]></description>
        </item>
        <atom:link href="http://medium.superfeedr.com" rel="hub"/>
        <item>
            <link>https://medium.com/@its_damo/you-can-use-port-if-you-are-really-in-need-of-a-javascript-library-for-instance-we-use-google-maps-33f09bace29?source=rss-cc848065c96b------2</link>
            <guid isPermaLink="false">https://medium.com/p/33f09bace29</guid>
            <dc:creator><![CDATA[Damien Le Berrigaud]]></dc:creator>
            <pubDate>Tue, 20 Sep 2016 12:54:44 GMT</pubDate>
            <atom:updated>2016-09-20T12:54:44.561Z</atom:updated>
            <content:encoded><![CDATA[<p>You can use port if you are really in need of a JavaScript library, for instance we use Google maps JS library in our current app, via ports.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=33f09bace29" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Javascript is not worth your time, move on to something like Elm.]]></title>
            <link>https://medium.com/@its_damo/javascript-is-not-worth-your-time-move-on-to-something-like-elm-a219bfb71392?source=rss-cc848065c96b------2</link>
            <guid isPermaLink="false">https://medium.com/p/a219bfb71392</guid>
            <dc:creator><![CDATA[Damien Le Berrigaud]]></dc:creator>
            <pubDate>Tue, 20 Sep 2016 02:08:19 GMT</pubDate>
            <atom:updated>2016-09-20T14:12:54.093Z</atom:updated>
            <content:encoded><![CDATA[<p>Javascript is not worth your time, move on to something like Elm. I have done so much frontend dev with Backbone, Angular, Ember, “no framework”, in pure JS, coffee script, typescript, ECMA script 6… I’ve learned to dislike every single one of them.</p><p>Try and setup a Karma runner for Angular 2… good luck having tests separated from the rest of your source code (like in every other language really).</p><p>Try and componentize an ember frontend application… it’s really painful and impossible to test components in isolation.</p><p>The best solution I’ve found was really to roll your own… but it’s tough on big projects when the best language option is Typescript with optional typing only.</p><p>3 months into a frontend app in production written in Elm: 0 regrets. No runtime errors, a great compiler, easy to architecture the app, easy to restructure/refactor code, good IntelliJ support, a surprisingly easy learning curve, and best of all: no javascript ecosystem to deal with.</p><p>Not turning back.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=a219bfb71392" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Testing Kotlin with a custom DSL for Aspen]]></title>
            <link>https://medium.com/@its_damo/testing-kotlin-with-a-custom-dsl-for-aspen-ab4b04efe77a?source=rss-cc848065c96b------2</link>
            <guid isPermaLink="false">https://medium.com/p/ab4b04efe77a</guid>
            <category><![CDATA[kotlin]]></category>
            <category><![CDATA[software-testing]]></category>
            <category><![CDATA[java]]></category>
            <category><![CDATA[spring-framework]]></category>
            <category><![CDATA[spring-boot]]></category>
            <dc:creator><![CDATA[Damien Le Berrigaud]]></dc:creator>
            <pubDate>Wed, 13 Jul 2016 00:34:56 GMT</pubDate>
            <atom:updated>2016-07-13T00:34:56.051Z</atom:updated>
            <content:encoded><![CDATA[<figure><img alt="" src="https://cdn-images-1.medium.com/max/256/1*jF4RPcF19aIFMnKF0zdSYQ.png" /></figure><h4>Where that feature came from</h4><p>When I started working on Aspen, I was focusing on only a few things: I want an easy way to regroup my tests for a given function, and I want to be able to name my tests with a simple sentence but I don’t want to have to name my tests. That lead to version 1.0.</p><p>Then came Spring integration, version 1.1. Then we started talking to more people to see what they wanted, and it became quickly obvious that a very simple DSL was not going to be enough for some. So I started working on another DSL that would allow nesting of the tree structure, like rSpec does. This lead to version 1.2.</p><p>During the creation of that second DSL, I tried to figure out what was the right abstraction for it. It became obvious that we are building a tree structure and running that. So now I’m going to show you how to create your own DSL that builds a tree structure for Aspen.</p><h4>Building a TestTree</h4><p>The goal of the DSL is to build a TestTree that can then be run by the TestTreeRunner from Aspen. For example, with the built-in DSL, the following code…</p><pre><strong>class </strong>MyTests: Test(<strong>{<br><br>    </strong>describe(<strong>&quot;foo&quot;</strong>) <strong>{<br>        </strong>test(<strong>&quot;a&quot;</strong>) <strong>{<br><br>        }<br><br>        </strong>test(<strong>&quot;b&quot;</strong>) <strong>{<br><br>        }<br>    }<br><br>    </strong>describe(<strong>&quot;bar&quot;</strong>) <strong>{<br>        </strong>test(<strong>&quot;c&quot;</strong>) <strong>{<br><br>        }<br>    }<br>}</strong>)</pre><p>…would build the following structure.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*ot5NVvtFgCI5vI80FfbsVg.png" /></figure><h4>The TestTree Interface</h4><p>An Aspen DSL implements the TestTree Interface.</p><pre>interface TestTree {<br>    fun readTestBody()<br>    fun getRoot(): TestBranch<br>}</pre><p>The <em>readTestBody</em> function is the one that is supposed to evaluate the body of the tests and build the tree structure, thus making the root available. It is invoked at a particular time in the SpringTestTreeRunner for instance, the default TestTreeRunner invokes it as soon as it needs to browse the tree.</p><p>The <em>getRoot</em> function is more obvious, it returns the first branch of your Tree.</p><p>A TestBranch has <em>children</em> and optional <em>before</em> and after <em>blocks</em>. Its children can be of type TestBranch or TestLeaf. A TestLeaf represents an actual test, it has a <em>block</em> of code to execute and can have a <em>focused</em> flag.</p><p>All the code for the TestTree is in a single file: <a href="https://github.com/dam5s/aspen/blob/master/libraries/aspen/src/main/kotlin/io/damo/aspen/TestTree.kt">https://github.com/dam5s/aspen/blob/master/libraries/aspen/src/main/kotlin/io/damo/aspen/TestTree.kt</a></p><h4>The Test class</h4><p>Let’s start with the easy part, implementing the TestTree interface:</p><pre>@RunWith(TestTreeRunner::class)<br>open class Test : TestTree {</pre><pre>    private val root = TestBranch.createRoot()<br>    private val body: Test.() -&gt; Unit<br><br>    constructor(body: Test.() -&gt; Unit) {<br>        this.body = body<br>    }<br><br>    override fun getRoot() = root<br><br>    override fun readTestBody() {<br>        this.body.invoke(this)<br>    }<br>}</pre><p>This is an open class that is run with the TestTreeRunner and implements TestTree. The root is created with TestBranch.createRoot, creating a branch without parent, without name… The body is an extension function for the class itself, this is the block of code that will contain your tests and build the TestTree structure, it is evaluated in the readTestBody function.</p><p>Now you can start adding some functions that will help you build the tree.</p><p>This will allow specifying the before and after block:</p><pre>fun before(block: () -&gt; Unit) {<br>    root.before = block<br>}<br><br>fun after(block: () -&gt; Unit) {<br>    root.after = block<br>}</pre><p>This will add a test at the root level:</p><pre>fun test(name: Any = &quot;unnamed test&quot;, block: () -&gt; Unit) {<br>    root.addChildLeaf(name.toString(), block)<br>}</pre><p>Now in order to add branches that do not allow nesting, we have to create a function that will take an extension function for a different type. If it was for the same type, then we would be able to call that same function over and over.</p><pre>fun describe(name: Any, block: TestDescription.() -&gt; Unit) {<br>    val newBranch = root.addChildBranch(name.toString())<br>    TestDescription(newBranch).block()<br>}</pre><p>The TestDescription only allows adding tests:</p><pre>class TestDescription(private val branch: TestBranch) {<br>    fun test(name: String = &quot;unnamed test&quot;, block: () -&gt; Unit) {<br>        branch.addChildLeaf(name, block)<br>    }<br>}</pre><p>And that’s it! From that point you can start making your DSL even smarter.</p><p>For instance, I have been working on making a DSL for nicer table based tests. You can see its <a href="https://github.com/dam5s/aspen/blob/table-test-spike/libraries/aspen/src/main/kotlin/io/damo/aspen/Test.kt">first implementation on Github</a>. It would allow for writing a test like this:</p><pre>class MathTest : Test(<strong>{<br><br>    </strong>class MaxData(context: String, val a: Int, val b: Int, val c: Int)<br>        : TestData(context)<br><br>    val testData = <em>listOf</em>(<br>        MaxData(&quot;when equal&quot;, 2, 2, 2),<br>        MaxData(&quot;when a is greater&quot;, 3, 1, 3),<br>        MaxData(&quot;when b is greater&quot;, 3, 4, 4)<br>    )<br><br>    tableTest(testData) <strong>{<br>        </strong>test <strong>{<br>            </strong>assertThat(Math.max(a, b), equalTo(c))<br>        <strong>}<br>    }<br>}</strong>)</pre><p>But it is still a work in progress, as I still need to figure out exactly how I want my test to look like (that test block does not look useful for instance).</p><p>I hope this convinced you that it’s very simple to write your own type safe DSL for testing with Aspen. Let me know what you think about it!</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=ab4b04efe77a" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Kotlin testing with Aspen and Aspen Spring]]></title>
            <link>https://medium.com/@its_damo/kotlin-testing-with-aspen-and-aspen-spring-59a3d211a374?source=rss-cc848065c96b------2</link>
            <guid isPermaLink="false">https://medium.com/p/59a3d211a374</guid>
            <category><![CDATA[software-testing]]></category>
            <category><![CDATA[kotlin]]></category>
            <category><![CDATA[spring-framework]]></category>
            <category><![CDATA[spring-boot]]></category>
            <category><![CDATA[java]]></category>
            <dc:creator><![CDATA[Damien Le Berrigaud]]></dc:creator>
            <pubDate>Tue, 05 Jul 2016 21:14:57 GMT</pubDate>
            <atom:updated>2016-07-05T21:14:57.557Z</atom:updated>
            <content:encoded><![CDATA[<p>TL;DR — Aspen 2.0 is out, check it out: <a href="https://github.com/dam5s/aspen">https://github.com/dam5s/aspen</a></p><h4>How I got into Kotlin</h4><p>I started looking at Kotlin around release M9, it was quite a few months before it was released as 1.0, but it was already very usable. Kotlin promised easy integration with your Java code, running on the Java 6 VM and a lot of features that make the code a lot nicer to work with.</p><p>Having worked with Java for a couple years with some of our clients, I was really excited to get rid of the verbosity and keep the things I like in Java: a good build system (Gradle), easy to build modular applications, a decent type system (that gets improved a lot by Kotlin), and a huge ecosystem with mature libraries.</p><p>Our first production project for a client was using Kotlin M12 for an Android application. The experience was great, the client developers were former C# developers. They loved the language, and despite a few quirks here and there, we shipped it by the time Kotlin M13 was released. A few weeks later, Kotlin 1.0 was released.</p><p>Now I have been through a couple more projects with Kotlin and I would advise any Java developer out there to look into it. It’s easy to get started with, and you can introduce it in your existing projects without pain.</p><h4>Why I decided to create Aspen</h4><p>I have been really enjoying the simplicity of Java unit tests using JUnit. Its simplicity encourages you to write simple tests that are easy to read. Using only one “@Before” annotated function encourages you to make each test readable from top to bottom without having to jump around.</p><p>The only thing I really miss from my Ruby days was being able to write a short sentence to describe my test. With JUnit, I would name tests following this pattern:</p><pre>public void testMyFunction              // testing the happy path<br>public void testMyFunction_WhenInput... // testing another context</pre><p>Some developers would also describe the expected outcome in the function name. I do not do that because I want to encourage developers in my team to name variables and write assertions that talk for themselves. Also I do not want to have yet another comment that can get out of sync easily.</p><p>Kotlin allowing to create type safe DSLs, I decided to write a DSL for testing. It is inspired by RSpec and Spek, but it is a lot simplified and easy to extend with your own DSL if you would like.</p><h4>Here comes Aspen</h4><p>An Aspen test looks like this:</p><pre>class PersonTestExample : Test(<strong>{<br>    </strong>describe(&quot;#fullName&quot;) <strong>{<br>        </strong>test <strong>{<br>            </strong>val person = <em>buildPerson</em>(<br>                firstName = &quot;Jane&quot;,<br>                lastName = &quot;Doe&quot;<br>            )<br>            assertThat(person.fullName(), equalTo(&quot;Jane Doe&quot;))<br>        <strong>}<br><br>        </strong>test(&quot;with a middle name&quot;) <strong>{<br>            </strong>val person = <em>buildPerson</em>(<br>                firstName = &quot;John&quot;,<br>                middleName = &quot;William&quot;,<br>                lastName = &quot;Doe&quot;<br>            )<br>            assertThat(person.fullName(), equalTo(&quot;John W. Doe&quot;))<br>        <strong>}<br>    }<br><br>    </strong>describe(&quot;#greeting&quot;) <strong>{<br>        </strong>test <strong>{<br>            </strong>val person = <em>buildPerson</em>(<br>                firstName = &quot;Jane&quot;,<br>                lastName = &quot;Doe&quot;<br>            )<br>            assertThat(person.greeting(), equalTo(&quot;Greetings Jane!&quot;))<br>        <strong>}<br>    }<br>}</strong>)</pre><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*SYm5JoxIMi_Xr0ikR4u2hA.png" /><figcaption>Output from running the test above in IntelliJ IDEA.</figcaption></figure><p>With the help of a few colleagues (Joe, Jack, Mike G, Travis, Nathan, Alex… thanks guys!), we wrote Aspen. It’s a really simple DSL that makes unit tests easier to organize, and it’s built on top of JUnit.</p><h4>Spring Integration</h4><p>A big requirement for us to use a testing framework: it has to work with Spring. Most of the tests we write with Spring are pure unit tests, so that already just works. But we also have a few tests that require us to use the Spring test runner in order to spin up the server and run some higher level tests.</p><p>Thankfully the Spring team has done a great job at abstracting the way the Spring runner work. It’s been very easy to write our own runner for Spring that reuses the code by the Spring team.</p><p>A test with Aspen Spring can look like this:</p><pre>@RunWith(SpringTestTreeRunner::class)<br>@SpringApplicationConfiguration(ExampleApplication::class)<br>@WebIntegrationTest(&quot;server.port:0&quot;)<br>class SpringApplicationTestExample : Test({</pre><pre>  val message: String = inject(&quot;myMessage&quot;)<br>  val port = injectValue(&quot;local.server.port&quot;, Int::class)<br>  val client = OkHttpClient()</pre><pre>  test(&quot;GET /hello&quot;) {<br>    val request = Request.Builder()<br>      .url(&quot;http://localhost:$port/hello&quot;)<br>      .build()<br>    val response = client.newCall(request).execute()</pre><pre>    val body = response.body().string()</pre><pre>    assertThat(body, equalTo(&quot;&quot;&quot;{&quot;hello&quot;:&quot;world&quot;}&quot;&quot;&quot;))<br>    assertThat(body, equalTo(&quot;&quot;&quot;{&quot;hello&quot;:&quot;$message&quot;}&quot;&quot;&quot;))<br>  }</pre><pre>  test(&quot;GET /world&quot;) {<br>    //...<br>  }<br>})</pre><h4>Getting Aspen and Aspen Spring</h4><p>Aspen and Aspen Spring are on Github and can be added to your project via JCenter.</p><ul><li><a href="https://github.com/dam5s/aspen">dam5s/aspen</a></li><li><a href="https://bintray.com/dam5s/maven/aspen/view">aspen</a></li></ul><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=59a3d211a374" width="1" height="1">]]></content:encoded>
        </item>
    </channel>
</rss>
